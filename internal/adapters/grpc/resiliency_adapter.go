package grpc

import (
	"context"
	"fmt"
	"io"
	"log"

	"github.com/VallabhSLEPAM/go-with-grpc/protogen/go/resiliency"
	applicationResiliency "github.com/VallabhSLEPAM/grpc-server/internal/application/domain/resiliency"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

func generateErrStatus(statusCode uint32) error {
	str := "Generated by server"

	if sc, ok := applicationResiliency.StatusCodeMap[statusCode]; ok && sc == codes.OK {
		return nil
	}
	if sc, ok := applicationResiliency.StatusCodeMap[statusCode]; ok {
		return status.New(sc, str).Err()
	} else {
		return status.New(codes.Internal, str).Err()
	}
}

func (grpcAdapter *GRPCAdapter) UnaryResiliency(ctx context.Context, req *resiliency.ResiliencyRequest) (*resiliency.ResiliencyResponse, error) {
	log.Print("UnaryResiliency called")
	str, stc := grpcAdapter.resiliencyService.GenerateResiliency(int(req.MinDelaySecond), int(req.MaxDelaySecond), req.StatusCodes)

	if errStatus := generateErrStatus(stc); errStatus != nil {
		return nil, errStatus
	}
	return &resiliency.ResiliencyResponse{
		DummyString: str,
	}, nil
}

func (grpcAdapter *GRPCAdapter) ServerResiliency(req *resiliency.ResiliencyRequest, stream grpc.ServerStreamingServer[resiliency.ResiliencyResponse]) error {
	log.Println("ServerResiliency called")

	ctx := stream.Context()

	for {
		select {
		case <-ctx.Done():
			log.Println("Client cancelled request")
			return nil
		default:
			str, stc := grpcAdapter.resiliencyService.GenerateResiliency(int(req.MinDelaySecond), int(req.MaxDelaySecond), req.StatusCodes)

			if errStatus := generateErrStatus(stc); errStatus != nil {
				return errStatus
			}

			stream.Send(&resiliency.ResiliencyResponse{
				DummyString: str,
			})
		}
	}

}

func (grpcAdapter *GRPCAdapter) ClientResiliency(stream grpc.ClientStreamingServer[resiliency.ResiliencyRequest, resiliency.ResiliencyResponse]) error {
	log.Println("ClientResiliency called")

	i := 0
	for {

		req, err := stream.Recv()

		if err == io.EOF {
			res := resiliency.ResiliencyResponse{
				DummyString: fmt.Sprintf("Received %v requests from client:", i),
			}
			return stream.SendAndClose(&res)
		}
		if req != nil {
			_, stc := grpcAdapter.resiliencyService.GenerateResiliency(int(req.MinDelaySecond), int(req.MaxDelaySecond), req.StatusCodes)

			if errStatus := generateErrStatus(stc); errStatus != nil {
				return errStatus
			}
		}
		i = i + 1
	}
}

func (grpcAdapter *GRPCAdapter) BiDirectionalResiliency(bidirectionalStream grpc.BidiStreamingServer[resiliency.ResiliencyRequest, resiliency.ResiliencyResponse]) error {
	log.Println("BiDirectionalResiliency called")

	ctx := bidirectionalStream.Context()
	for {
		select {
		case <-ctx.Done():
			log.Println("Client cancelled request")
			return nil
		default:
			req, err := bidirectionalStream.Recv()
			if err == io.EOF {
				return nil
			}
			if err != nil {
				log.Fatalln("Error while reading from client: ", err)
			}
			str, stc := grpcAdapter.resiliencyService.GenerateResiliency(int(req.MinDelaySecond), int(req.MaxDelaySecond), req.StatusCodes)

			if errStatus := generateErrStatus(stc); errStatus != nil {
				return errStatus
			}
			err = bidirectionalStream.Send(&resiliency.ResiliencyResponse{
				DummyString: str,
			})
			if err != nil {
				log.Fatalln("Error while sending response to client: ", err)
			}

		}
	}
}
